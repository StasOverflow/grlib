
#******************************************************************************
#
# Get the operating system name.  If this is Cygwin, the .d files will be
# munged to convert c: into /cygdrive/c so that "make" will be happy with the
# auto-generated dependencies.
#
#******************************************************************************
os:=${shell uname -s}

#******************************************************************************
#
# The compiler to be used.
#
#******************************************************************************
ifndef COMPILER
COMPILER=gcc
endif

#******************************************************************************
#
# Definitions for using GCC.
#
#******************************************************************************
ifeq (${COMPILER}, gcc)

#
# Get the prefix for the tools to use.  Use arm-stellaris-eabi if it exists,
# otherwise fall back to arm-none-eabi.
#
PREFIX = arm-none-eabi

#
# The command for calling the compiler.
#
CC=${PREFIX}-gcc

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb         \
       -mcpu=cortex-m3 \
       -MD

#
# The flags passed to the C compiler.
#
CFLAGS=-mthumb             \
       -mcpu=cortex-m3     \
       -Os                 \
       -ffunction-sections \
       -fdata-sections     \
       -std=gnu99          \
       -Wall               \
       -pedantic           \
       -c
       
#
# The flags passed to the C++ compiler.
#
CPPFLAGS=-mthumb             \
         -mcpu=cortex-m3     \
         -Os                 \
         -ffunction-sections \
         -fdata-sections     \
         -Wall               \
         -std=gnu++98        \
         -pedantic           \
         -c                  \
         -fno-rtti           \
         -fno-exceptions

#
# The command for calling the library archiver.
#
AR=${PREFIX}-ar

#
# The command for calling the linker.
#
LD=${PREFIX}-ld

#
# The flags passed to the linker.
#
LDFLAGS=--gc-sections

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}

#
# Get the location of libc.a from the GCC front-end.
#
LIBC=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}

#
# Get the location of libm.a from the GCC front-end.
#
LIBM=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}

#
# The command for extracting images from the linked executables.
#
OBJCOPY=${PREFIX}-objcopy

#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#
ifdef DEBUG
CFLAGS+=-g -D DEBUG
CPPFLAGS+=-g -D DEBUG
endif

#
# Add the include file paths to AFLAGS and CFLAGS.
#
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CPPFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}

#
# The rule for building fonts.
#
${FONTS_DIR}/%.c: %.ttf
	@echo "  FTRASTERIZE  ${<}"
	@$(FTRASTERIZE) -f ${@} -s F0 -c $(shell echo $(basename ${<}) | sed 's/[0-9].*//').glyphs -u -r ${<} > /dev/null

#
# The rule for building the object file from each C source file.
#
${OBJ_DIR}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];                            \
	 then                                                 \
	     echo "  CC           ${<}";                      \
	 else                                                 \
	     echo ${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}; \
	 fi
	@${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}

#
# The rule for building the object file from each C++ source file.
#
${OBJ_DIR}/%.o: %.cpp
	@if [ 'x${VERBOSE}' = x ];                            \
	 then                                                 \
	     echo "  CPP          ${<}";                      \
	 else                                                 \
	     echo ${CC} ${CPPFLAGS} -D${COMPILER} -o ${@} ${<}; \
	 fi
	@${CC} ${CPPFLAGS} -D${COMPILER} -o ${@} ${<}

#
# The rule for building the object file from each assembly source file.
#
${OBJ_DIR}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  AS           ${<}";                         \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}; \
	 fi
	@${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}

#
# The rule for creating an object library.
#
${LIB_DIR}/%.a:
	@if [ 'x${VERBOSE}' = x ];       \
	 then                            \
	     echo "  AR           ${@}"; \
	 else                            \
	     echo ${AR} -cr ${@} ${^};   \
	 fi
	@${AR} -cr ${@} ${^}

#
# The rule for linking the application.
#
${BUILD_DIR}/%.axf:
	@if [ 'x${SCATTERgcc_${notdir ${@:.axf=}}}' = x ];                    \
	 then                                                                 \
	     ldname="${ROOT}/gcc/standalone.ld";                              \
	 else                                                                 \
	     ldname="${SCATTERgcc_${notdir ${@:.axf=}}}";                     \
	 fi;                                                                  \
	 if [ 'x${VERBOSE}' = x ];                                            \
	 then                                                                 \
	     echo "  LD           ${@} ${LNK_SCP}";                           \
	 else                                                                 \
	     echo ${LD} -T $${ldname}                                         \
	          --entry ${ENTRY_${notdir ${@:.axf=}}}                       \
	          ${LDFLAGSgcc_${notdir ${@:.axf=}}}                          \
	          ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                  \
	          '${LIBM}' '${LIBC}' '${LIBGCC}';                            \
	 fi;                                                                  \
	${LD} -T $${ldname}                                                   \
	      --entry ${ENTRY_${notdir ${@:.axf=}}}                           \
	      ${LDFLAGSgcc_${notdir ${@:.axf=}}}                              \
	      ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                      \
	      '${LIBM}' '${LIBC}' '${LIBGCC}'
	@${OBJCOPY} -O binary ${@} ${@:.axf=.bin}
endif

