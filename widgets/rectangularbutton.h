//*****************************************************************************
//
// rectangularbutton.h - Prototypes for the rectangular button.
//
//*****************************************************************************

#ifndef __RECTANGULARBUTTON_H__
#define __RECTANGULARBUTTON_H__

//*****************************************************************************
//
//! \addtogroup rectangularbutton_api
//! @{
//
//*****************************************************************************

//*****************************************************************************
//
// If building with a C++ compiler, make all of the definitions in this header
// have a C binding.
//
//*****************************************************************************
#ifdef __cplusplus
extern "C"
{
#endif

//*****************************************************************************
//
//! The class that describes a rectangular button widget.
//
//*****************************************************************************
class RectangularButton : public Widget
{
public:
	//
	//! Constructs a RectangularButton widget
	//
	RectangularButton(unsigned char ucID, Widget *pParent, long lX, long lY, long lWidth, long lHeight);

	//
	//! Draws the contents of a rectangular button.
	//
	void Draw(void);

	//
	//! Handles pointer events for a rectangular button.
	//
	long Click(unsigned long ulMsg, long lX, long lY);

	//
	//! Handles messages for a rectangular button widget.
	//
	long MessageProc(unsigned long ulMsg, unsigned long ulParam1,
			         unsigned long ulParam2);

	//
	//! Destroys a RectangularButton widget
	//
	~RectangularButton(void);

    //
    //! The style for this widget.  This is a set of flags defined by
    //! RB_STYLE_xxx.
    //
    unsigned long ulStyle;

    //
    //! The 24-bit RGB color used to fill this rectangular button, if RB_STYLE_FILL is
    //! selected, and to use as the background color if RB_STYLE_TEXT_OPAQUE is
    //! selected.
    //
    unsigned long ulFillColor;

    //
    //! The 24-bit RGB color used to fill this rectangular button when it is pressed,
    //! if RB_STYLE_FILL is selected, and to use as the background color if
    //! RB_STYLE_TEXT_OPAQUE is selected.
    //
    unsigned long ulPressFillColor;

    //
    //! The 24-bit RGB color used to outline this rectangular button, if
    //! RB_STYLE_OUTLINE is selected.
    //
    unsigned long ulOutlineColor;

    //
    //! The 24-bit RGB color used to draw text on this rectangular button, if
    //! RB_STYLE_TEXT is selected.
    //
    unsigned long ulTextColor;

    //
    //! A pointer to the font used to render the rectangular button text, if
    //! RB_STYLE_TEXT is selected.
    //
    const tFont *pFont;

    //
    //! A pointer to the text to draw on this rectangular button, if RB_STYLE_TEXT is
    //! selected.
    //
    char *pcText;

    //
    //! A pointer to the image to be drawn onto this rectangular button, if
    //! RB_STYLE_IMG is selected.
    //
    const unsigned char *pucImage;

    //
    //! A pointer to the image to be drawn onto this rectangular button when it is
    //! pressed, if RB_STYLE_IMG is selected.
    //
    const unsigned char *pucPressImage;

    //
    //! The number of pointer events to delay before starting to auto-repeat,
    //! if RB_STYLE_AUTO_REPEAT is selected.  The amount of time to which this
    //! corresponds is dependent upon the rate at which pointer events are
    //! generated by the pointer driver.
    //
    unsigned short usAutoRepeatDelay;

    //
    //! The number of pointer events between button presses generated by the
    //! auto-repeat function, if RB_STYLE_AUTO_REPEAT is selected.  The amount
    //! of time to which this corresponds is dependent up on the rate at which
    //! pointer events are generated by the pointer driver.
    //
    unsigned short usAutoRepeatRate;

    //
    //! The number of pointer events that have occurred.  This is used when
    //! RB_STYLE_AUTO_REPEAT is selected to generate the auto-repeat events.
    //
    unsigned long ulAutoRepeatTimer;

    //
    //! Indicate that button is in autorepeat state.
    //
    unsigned char bAutoRepeat;
};

//*****************************************************************************
//
//! This flag indicates that the rectangular button should be outlined.
//
//*****************************************************************************
#define RB_STYLE_OUTLINE        0x00000001

//*****************************************************************************
//
//! This flag indicates that the rectangular button should be filled.
//
//*****************************************************************************
#define RB_STYLE_FILL           0x00000002

//*****************************************************************************
//
//! This flag indicates that the rectangular button has a falling edge.
//
//*****************************************************************************
#define RB_STYLE_FALLING_EDGE   0x00000004

//*****************************************************************************
//
//! This flag indicates that the rectangular button should be filled by gradient.
//
//*****************************************************************************
#define RB_STYLE_GRADIENT       0x00000008

//*****************************************************************************
//
//! This flag indicates that the rectangular button should have text drawn on it.
//
//*****************************************************************************
#define RB_STYLE_TEXT           0x00000010

//*****************************************************************************
//
//! This flag indicates that the rectangular button should have an image drawn on it.
//
//*****************************************************************************
#define RB_STYLE_IMG            0x00000020

//*****************************************************************************
//
//! This flag indicates that the rectangular button text should be drawn opaque (in
//! other words, drawing the background pixels as well as the foreground
//! pixels).
//
//*****************************************************************************
#define RB_STYLE_TEXT_OPAQUE    0x00000040

//*****************************************************************************
//
//! This flag indicates that the rectangular button should auto-repeat, generating
//! repeated click events while it is pressed.
//
//*****************************************************************************
#define RB_STYLE_AUTO_REPEAT    0x00000080

//*****************************************************************************
//
//! This flag indicates that the rectangular button is pressed.
//
//*****************************************************************************
#define RB_STYLE_PRESSED        0x00000100

//*****************************************************************************
//
//! This flag indicates that the rectangular button is disabled
//! the button fills by gray and no click events processed.
//
//*****************************************************************************
#define RB_STYLE_DISABLED       0x00000200

//*****************************************************************************
//
// Mark the end of the C bindings section for C++ compilers.
//
//*****************************************************************************
#ifdef __cplusplus
}
#endif

//*****************************************************************************
//
// Close the Doxygen group.
//! @}
//
//*****************************************************************************

#endif // __RECTANGULARBUTTON_H__
